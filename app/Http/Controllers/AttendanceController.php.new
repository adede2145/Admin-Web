<?php

namespace App\Http\Controllers;

use App\Models\AttendanceLog;
use App\Models\Department;
use App\Models\Employee;
use App\Models\Kiosk;
use App\Models\DTRReport;
use Carbon\Carbon;
use Illuminate\Http\Request;

class AttendanceController extends Controller
{
    public function __construct()
    {
        $this->middleware('auth');
        $this->middleware('department.admin')->except(['store', 'verifyFingerprint', 'verifyRFID']);
    }

    // Show attendance management page
    public function index(Request $request)
    {
        $query = AttendanceLog::with(['employee.department']);

        // Apply filters
        if ($request->filled('start_date')) {
            $query->whereDate('time_in', '>=', $request->start_date);
        }
        if ($request->filled('end_date')) {
            $query->whereDate('time_in', '<=', $request->end_date);
        }
        if ($request->filled('employee_id')) {
            $query->where('employee_id', $request->employee_id);
        }
        if ($request->filled('department_id')) {
            $query->whereHas('employee', function ($q) use ($request) {
                $q->where('department_id', $request->department_id);
            });
        }
        if ($request->filled('login_method')) {
            $query->where('method', $request->login_method);
        }
        if ($request->filled('status')) {
            if ($request->status === 'late') {
                // Assuming late is when time_in is after 8:00 AM (adjust as needed)
                $query->whereTime('time_in', '>', '08:00:00');
            } elseif ($request->status === 'on_time') {
                // Assuming on time is when time_in is at or before 8:00 AM (adjust as needed)
                $query->whereTime('time_in', '<=', '08:00:00');
            }
        }

        // Department restriction for non-super admins
        if (auth()->user()->role->role_name !== 'super_admin' && auth()->user()->department_id) {
            $query->whereHas('employee', function ($q) {
                $q->where('department_id', auth()->user()->department_id);
            });
        }

        $attendanceLogs = $query->latest('time_in')->paginate(20);
        
        // RBAC: Only show departments that the user has access to
        if (auth()->user()->role->role_name === 'super_admin') {
            $departments = Department::all();
        } else {
            $departments = Department::where('department_id', auth()->user()->department_id)->get();
        }

        // Employees list for DTR modal (scoped by role/department)
        $employeesForDTR = Employee::when(
            auth()->user()->role->role_name !== 'super_admin',
            function ($q) {
                $q->where('department_id', auth()->user()->department_id);
            }
        )
        ->orderBy('full_name')
        ->get();

        return view('attendance.index', compact('attendanceLogs', 'departments', 'employeesForDTR'));
    }

    // Update attendance record
    public function update(Request $request, $id)
    {
        $request->validate([
            'date' => 'required|date',
            'time_in' => 'required|date_format:H:i',
            'time_out' => 'nullable|date_format:H:i',
            'method' => 'required|in:rfid,fingerprint',
        ]);

        $attendanceLog = AttendanceLog::findOrFail($id);
        
        // Check if user can edit this record
        if (auth()->user()->role->role_name !== 'super_admin' && 
            auth()->user()->getAttribute('department_id') !== $attendanceLog->employee->department_id) {
            abort(403, 'You can only edit attendance records from your department.');
        }

        // Save old values for audit before any changes
        $oldValues = $attendanceLog->only(['time_in', 'time_out', 'method']);

        // Combine date and time for time_in
        $timeIn = $request->date . ' ' . $request->time_in;
        
        $updateData = [
            'time_in' => $timeIn,
            'method' => $request->method,
        ];

        // Only update time_out if provided
        if ($request->filled('time_out')) {
            $timeOut = $request->date . ' ' . $request->time_out;
            $updateData['time_out'] = $timeOut;
        }

        $attendanceLog->update($updateData);

        // Save new values for audit after the update
        $newValues = $attendanceLog->fresh()->only(['time_in', 'time_out', 'method']);

        try {
            // Create audit log entry with the correct model_id (attendance_id)
            $log = \App\Models\AuditLog::create([
                'admin_id'    => auth()->user()->admin_id,
                'action'      => 'edit',
                'model_type'  => 'AttendanceLog',
                'model_id'    => $attendanceLog->attendance_id,
                'old_values'  => json_encode($oldValues),
                'new_values'  => json_encode($newValues),
                'ip_address'  => request()->ip(),
                'user_agent'  => request()->userAgent(),
            ]);
            
            \Log::info('Audit log created successfully', [
                'log_id' => $log->id,
                'attendance_id' => $attendanceLog->attendance_id,
                'changes' => [
                    'old' => $oldValues,
                    'new' => $newValues
                ]
            ]);
        } catch (\Exception $e) {
            \Log::error('Failed to create audit log', [
                'error' => $e->getMessage(),
                'attendance_id' => $attendanceLog->attendance_id
            ]);
        }

        return back()->with('success', 'Attendance record updated successfully!');
    }

    // Delete attendance record
    public function destroy($id)
    {
        $attendanceLog = AttendanceLog::findOrFail($id);
        
        // Check if user can delete this record
        if (auth()->user()->role->role_name !== 'super_admin' && 
            auth()->user()->getAttribute('department_id') !== $attendanceLog->employee->department_id) {
            abort(403, 'You can only delete attendance records from your department.');
        }

        $attendanceLog->delete();

        return back()->with('success', 'Attendance record deleted successfully!');
    }
}